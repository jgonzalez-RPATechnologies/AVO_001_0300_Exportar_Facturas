<Activity mc:Ignorable="sap sap2010" x:Class="CreateXML_Avoris" this:CreateXML_Avoris.in_Data="[New Dictionary(Of String, Object) From {&#xA;&#x9;{&quot;BatchIdentifier&quot;, &quot;asdf-43?&quot;}&#xA;}]" this:CreateXML_Avoris.in_DebugWF="True" this:CreateXML_Avoris.in_Config="[New Dictionary(Of String, Object) From {&#xD;&#xA;&#x9;{&quot;TempPath&quot;, &quot;Data\Temp\&quot;}&#xD;&#xA;}]" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:njl="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:sc="clr-namespace:System.ComponentModel;assembly=System.ComponentModel.TypeConverter" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:sx="clr-namespace:System.Xml;assembly=System.Private.Xml" xmlns:sxl="clr-namespace:System.Xml.Linq;assembly=System.Private.Xml.Linq" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Data" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="out_Data" Type="OutArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property sap2010:Annotation.AnnotationText="Se usa para comprobar el Workflow, se debe establecer como False para el uso normal." Name="in_DebugWF" Type="InArgument(x:Boolean)" />
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
  </x:Members>
  <sap:VirtualizedContainerService.HintSize>1234,4015</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="33">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Xml</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Xml.XPath</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>System.Security</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="65">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>System.Private.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Windows.Forms.Design</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices.RuntimeInformation</AssemblyReference>
      <AssemblyReference>System.Text.RegularExpressions</AssemblyReference>
      <AssemblyReference>System.Xml.XPath.XDocument</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Collections.Specialized</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.Watcher</AssemblyReference>
      <AssemblyReference>System.IO.Packaging</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.AccessControl</AssemblyReference>
      <AssemblyReference>System.IO.FileSystem.DriveInfo</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="******** DESCRIPCIÓN ********&#xA;Cumplimenta y guarda un fichero XML según los datos de entrada, siguiendo las especificaciones del cliente.&#xA;&#xA;******** REQUISITOS ********&#xA;Requiere el paquete Newtonsoft.Json&#xA;&#xA;******** ENTRADAS ********&#xA;- in_data&lt;Dictionary&lt;string, Object&gt;&gt;: Datos de entrada del módulo.&#xA;        - AttachPdfPath &lt;string&gt;: Ruta donde se encuentra el documento PDF que se debe adjuntar al XML.&#xA;        - OutputPath &lt;string&gt;: Ruta donde se almacenará el fichero XML generado.&#xA;        - TotalAmmount &lt;string&gt;: Importe total de todas las facturas incluidas.&#xA;        - InvoicesCount &lt;string&gt;: Número de facturas que se incluirán en el documento&#xA;        - InvoiceCurencyCode &lt;string&gt;: Código de la moneda en la que están definidas las cantidades de la factura.&#xA;        - InvoiceIssuerType &lt;string&gt;: Tipo de emisor de la factura.&#xA;        - BatchIdentifier &lt;string&gt;: Identificador del grupo de facturas.&#xA;&#xA;  &#xA;******** SALIDAS ********&#xA;-out_Data&lt;Dictionary&lt;string,Object&gt;: Datos de salida del módulo.&#xA;         - str_Filename&lt;string&gt;:  El nombre del fichero que se genera sin la extensión." DisplayName="CreateXML_Avoris" sap:VirtualizedContainerService.HintSize="609,3950" sap2010:WorkflowViewState.IdRef="Sequence_2">
    <Sequence.Variables>
      <Variable x:TypeArguments="sx:XmlDocument" Name="doc" />
      <Variable x:TypeArguments="x:String" Name="str_json" />
      <Variable x:TypeArguments="njl:JObject" Name="JsonObj" />
      <Variable x:TypeArguments="x:String" Name="BaseFilename" />
      <Variable x:TypeArguments="sxl:XElement" Name="TaxesOutputs" />
      <Variable x:TypeArguments="sd:DataTable" Name="prueba" />
      <Variable x:TypeArguments="sxl:XElement" Name="Tax" />
      <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="Data" />
      <Variable x:TypeArguments="sxl:XElement" Name="Items" />
      <Variable x:TypeArguments="sxl:XElement" Name="Document" />
      <Variable x:TypeArguments="x:String" Name="TempPath" />
      <Variable x:TypeArguments="x:String" Name="OutputFilePath" />
      <Variable x:TypeArguments="x:String" Name="XmlFile" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:IfElseIf DisplayName="Else If" sap:VirtualizedContainerService.HintSize="547,819" sap2010:WorkflowViewState.IdRef="IfElseIf_1">
      <ui:IfElseIf.ConditionBlocks>
        <sc:BindingList x:TypeArguments="ui:IfElseIfBlock" AllowEdit="True" AllowNew="True" AllowRemove="True" RaiseListChangedEvents="True">
          <ui:IfElseIfBlock BlockType="If" Condition="[in_DebugWF]">
            <ui:IfElseIfBlock.Then>
              <Sequence DisplayName="Initialize Debug" sap:VirtualizedContainerService.HintSize="496,394" sap2010:WorkflowViewState.IdRef="Sequence_7">
                <Sequence.Variables>
                  <Variable x:TypeArguments="sd:DataTable" Name="dt_Taxes" />
                  <Variable x:TypeArguments="sd:DataTable" Name="dt_Items" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:BuildDataTable DataTable="[dt_Taxes]" DisplayName="Build Data Table" sap:VirtualizedContainerService.HintSize="434,60" sap2010:WorkflowViewState.IdRef="BuildDataTable_1" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;str_TaxTypeCode&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;dbl_TaxableBase&quot; msdata:Caption=&quot;&quot; type=&quot;xs:double&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;dbl_TaxRate&quot; msdata:Caption=&quot;&quot; type=&quot;xs:double&quot; minOccurs=&quot;0&quot; /&gt;&#xA;                &lt;xs:element name=&quot;dbl_TaxAmount&quot; msdata:Caption=&quot;&quot; type=&quot;xs:double&quot; minOccurs=&quot;0&quot; /&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;  &lt;TableName&gt;&#xA;    &lt;str_TaxTypeCode&gt;Prueba 1&lt;/str_TaxTypeCode&gt;&#xA;    &lt;dbl_TaxableBase&gt;20&lt;/dbl_TaxableBase&gt;&#xA;    &lt;dbl_TaxRate&gt;0.1&lt;/dbl_TaxRate&gt;&#xA;    &lt;dbl_TaxAmount&gt;2&lt;/dbl_TaxAmount&gt;&#xA;  &lt;/TableName&gt;&#xA;  &lt;TableName&gt;&#xA;    &lt;str_TaxTypeCode&gt;Prueba 2&lt;/str_TaxTypeCode&gt;&#xA;    &lt;dbl_TaxableBase&gt;30&lt;/dbl_TaxableBase&gt;&#xA;    &lt;dbl_TaxRate&gt;0.2&lt;/dbl_TaxRate&gt;&#xA;    &lt;dbl_TaxAmount&gt;6&lt;/dbl_TaxAmount&gt;&#xA;  &lt;/TableName&gt;&#xA;&lt;/NewDataSet&gt;" />
                <ui:BuildDataTable DataTable="[dT_Items]" DisplayName="Build Data Table" sap:VirtualizedContainerService.HintSize="434,60" sap2010:WorkflowViewState.IdRef="BuildDataTable_2" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;str_ItemsDescription&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;str_DeliveryNoteNumber&quot; msdata:Caption=&quot;&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;  &lt;TableName&gt;&#xA;    &lt;str_ItemsDescription&gt;Descripción 1&lt;/str_ItemsDescription&gt;&#xA;    &lt;str_DeliveryNoteNumber&gt;Entrega 1&lt;/str_DeliveryNoteNumber&gt;&#xA;  &lt;/TableName&gt;&#xA;  &lt;TableName&gt;&#xA;    &lt;str_ItemsDescription&gt;Descripción 2&lt;/str_ItemsDescription&gt;&#xA;    &lt;str_DeliveryNoteNumber&gt;Entrega 2&lt;/str_DeliveryNoteNumber&gt;&#xA;  &lt;/TableName&gt;&#xA;&lt;/NewDataSet&gt;" />
                <Assign sap:VirtualizedContainerService.HintSize="434,83" sap2010:WorkflowViewState.IdRef="Assign_12">
                  <Assign.To>
                    <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[Data]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" xml:space="preserve">[New Dictionary(Of String, Object) From {
	{"str_SchemaVersion", "3.2"},
	{"str_BatchIdentifier", "ASDF1234"},
	{"str_Modality", "I"},
	{"str_InvoicesCount", "1"},
	{"str_TotalInvoicesAmount", "100.20"},
	{"str_InvoiceCurrencyCode","[EUR]"},
	{"str_InvoiceIssuerType", "EM"},
	{"str_SellerTaxIdentificationNumber", "B12345678"},
	{"str_SellerPersonTypeCode", "J"},
	{"str_SellerResidenceTypeCode", "R"},
	{"str_BuyerTaxIdentificationNumber", "A12345678"},
	{"str_BuyerPersonTypeCode", "J"},
	{"str_BuyerResidenceTypeCode", "R"},
	{"str_LanguageName", "[es]"},
	{"str_IssueDate", "2023-02-27"},
	{"str_TaxCurrencyCode", "[EUR]"},
	{"str_InvoiceDocumentType","FC" },
	{"str_InvoiceClass", "OO"},
	{"str_InstallmentDueDate", "2024-02-31"},
	{"str_InvoiceNumber", "asd-123456"},
	{"str_CorrectiveInvoiceNumber", "zxc\12345"}, 
	{"dt_Items", dt_Items},
	{"dt_Taxes", dt_Taxes},
	{"str_InvoiceTotal", "2000.32"}, 
	{"str_TotalGrossAmount", "534.43"},
	{"str_TotalTaxOutputs", "345.22"},
	{"str_RutaFichero", "C:\Users\AugustoGonzalez-RPA\Downloads\Esquema_castellano_v3_2_x_06_06_2017_unificado.pdf"}
}]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </ui:IfElseIfBlock.Then>
          </ui:IfElseIfBlock>
          <ui:IfElseIfBlock BlockType="Else">
            <ui:IfElseIfBlock.Then>
              <Sequence DisplayName="Initialize not Debug" sap:VirtualizedContainerService.HintSize="496,193" sap2010:WorkflowViewState.IdRef="Sequence_8">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_11">
                  <Assign.To>
                    <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[Data]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[in_Data]</InArgument>
                  </Assign.Value>
                </Assign>
              </Sequence>
            </ui:IfElseIfBlock.Then>
          </ui:IfElseIfBlock>
        </sc:BindingList>
      </ui:IfElseIf.ConditionBlocks>
    </ui:IfElseIf>
    <Sequence DisplayName="Build Taxes" sap:VirtualizedContainerService.HintSize="547,802" sap2010:WorkflowViewState.IdRef="Sequence_6">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Assign sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_9">
        <Assign.To>
          <OutArgument x:TypeArguments="sxl:XElement">[TaxesOutputs]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="sxl:XElement">[New XElement("TaxesOutputs")]</InArgument>
        </Assign.Value>
      </Assign>
      <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[CType(Data(&quot;dt_Taxes&quot;), DataTable)]" DisplayName="For Each Row in Data Table" sap:VirtualizedContainerService.HintSize="434,569" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
        <ui:ForEachRow.Body>
          <ActivityAction x:TypeArguments="sd:DataRow">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="sd:DataRow" Name="Row" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="400,452" sap2010:WorkflowViewState.IdRef="Sequence_3">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeCode ContinueOnError="{x:Null}" Code="out_Data =&#xA;new XElement(&quot;Tax&quot;,&#xA;&#x9;new XElement(&quot;TaxTypeCode&quot;, in_Data.Field&lt;string&gt;(&quot;str_TaxTypeCode&quot;)),&#xA;&#x9;new XElement(&quot;TaxRate&quot;, in_Data.Field&lt;double&gt;(&quot;dbl_TaxRate&quot;).ToString(&quot;0.00&quot;)),&#xA;&#x9;new XElement(&quot;TaxableBase&quot;, &#xA;&#x9;&#x9;new XElement(&quot;TotalAmount&quot;, (in_Data.Field&lt;double&gt;(&quot;dbl_TaxableBase&quot;)).ToString(&quot;0.00&quot;))&#xA;&#x9;),&#xA;&#x9;new XElement(&quot;TaxAmount&quot;,&#xA;&#x9;&#x9;new XElement(&quot;TotalAmount&quot;, (in_Data.Field&lt;double&gt;(&quot;dbl_TaxAmount&quot;)).ToString(&quot;0.00&quot;)) // Opcional&#xA;&#x9;)&#xA;);" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="338,165" sap2010:WorkflowViewState.IdRef="InvokeCode_1" Language="CSharp">
                <ui:InvokeCode.Arguments>
                  <InArgument x:TypeArguments="sd:DataRow" x:Key="in_Data">[Row]</InArgument>
                  <OutArgument x:TypeArguments="sxl:XElement" x:Key="out_Data">[Tax]</OutArgument>
                </ui:InvokeCode.Arguments>
              </ui:InvokeCode>
              <InvokeMethod DisplayName="Invoke Method" sap:VirtualizedContainerService.HintSize="338,136" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Add">
                <InvokeMethod.TargetObject>
                  <InArgument x:TypeArguments="sxl:XElement">[TaxesOutputs]</InArgument>
                </InvokeMethod.TargetObject>
                <InArgument x:TypeArguments="sxl:XElement">[Tax]</InArgument>
              </InvokeMethod>
            </Sequence>
          </ActivityAction>
        </ui:ForEachRow.Body>
      </ui:ForEachRow>
    </Sequence>
    <Sequence sap2010:Annotation.AnnotationText="Se tendrá que modificar cuando se obtengan los impuestos por línea de factura" DisplayName="Build Items" sap:VirtualizedContainerService.HintSize="547,657" sap2010:WorkflowViewState.IdRef="Sequence_10">
      <Sequence.Variables>
        <Variable x:TypeArguments="sxl:XElement" Name="Items" />
      </Sequence.Variables>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Assign sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_13">
        <Assign.To>
          <OutArgument x:TypeArguments="sxl:XElement">[Items]</OutArgument>
        </Assign.To>
        <Assign.Value>
          <InArgument x:TypeArguments="sxl:XElement">[New XElement("Items")]</InArgument>
        </Assign.Value>
      </Assign>
      <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[CType(Data(&quot;dt_Items&quot;), DataTable)]" DisplayName="For Each Row in Data Table" sap:VirtualizedContainerService.HintSize="434,393" sap2010:WorkflowViewState.IdRef="ForEachRow_2">
        <ui:ForEachRow.Body>
          <ActivityAction x:TypeArguments="sd:DataRow">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="sd:DataRow" Name="Row" />
            </ActivityAction.Argument>
            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="400,276" sap2010:WorkflowViewState.IdRef="Sequence_9">
              <Sequence.Variables>
                <Variable x:TypeArguments="sxl:XElement" Name="InvoiceLine" />
              </Sequence.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeCode ContinueOnError="{x:Null}" Code="out_Data =&#xA;new XElement(&quot;InvoiceLine&quot;,&#xA;&#x9;String.IsNullOrWhiteSpace(in_Data.Field&lt;string&gt;(&quot;str_DeliveryNoteNumber&quot;)) ? // Campo Opcional&#xA;        new XElement(&quot;str_DeliveryNoteNumber&quot;,&#xA;            new XElement(&quot;DeliveryNote&quot;,&#xA;                new XElement(&quot;DeliveryNoteNumber&quot;, in_Data.Field&lt;string&gt;(&quot;str_DeliveryNoteNumber&quot;))&#xA;            )&#xA;        )&#xA;        : null,&#xA;    new XElement(&quot;ItemDescription&quot;, in_Data.Field&lt;string&gt;(&quot;str_ItemsDescription&quot;))&#xA;);" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="338,165" sap2010:WorkflowViewState.IdRef="InvokeCode_4" Language="CSharp">
                <ui:InvokeCode.Arguments>
                  <InArgument x:TypeArguments="sd:DataRow" x:Key="in_Data">[Row]</InArgument>
                  <OutArgument x:TypeArguments="sxl:XElement" x:Key="out_Data">[InvoiceLine]</OutArgument>
                  <InArgument x:TypeArguments="sxl:XElement" x:Key="in_TaxesOutputs">[TaxesOutputs]</InArgument>
                </ui:InvokeCode.Arguments>
              </ui:InvokeCode>
            </Sequence>
          </ActivityAction>
        </ui:ForEachRow.Body>
      </ui:ForEachRow>
    </Sequence>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="string[] invoiceClassRectificative = {&quot;OR&quot;, &quot;CR&quot;}; // clase de factura que son rectificativas&#xA;&#xA;out_Data =&#xA;new XElement(&quot;Facturae&quot;,&#xA;&#x9;new XElement(&quot;FileHeader&quot;,&#xA;&#x9;&#x9;new XElement(&quot;SchemaVersion&quot;, in_Data[&quot;str_SchemaVersion&quot;].ToString()), // Formato 0.00&#xA;&#x9;&#x9;new XElement(&quot;Modality&quot;, in_Data[&quot;str_Modality&quot;].ToString()),&#xA;&#x9;&#x9;new XElement(&quot;InvoiceIssuerType&quot;, in_Data[&quot;str_InvoiceIssuerType&quot;].ToString()),&#xA;&#x9;&#x9;new XElement(&quot;Batch&quot;, &#xA;&#x9;&#x9;&#x9;new XElement(&quot;BatchIdentifier&quot;, in_Data[&quot;str_BatchIdentifier&quot;].ToString()),&#xA;&#x9;&#x9;&#x9;new XElement(&quot;InvoicesCount&quot;, in_Data[&quot;str_InvoicesCount&quot;].ToString()), // Formato &quot;0&quot;&#xA;&#x9;&#x9;&#x9;new XElement(&quot;TotalInvoicesAmount&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TotalAmount&quot;, in_Data[&quot;str_InvoiceTotal&quot;].ToString()) // Formato &quot;0.00&quot;&#xA;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;/* new XElement(&quot;TotalOutstandingAmount&quot;,  &#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TotalAmount&quot;, &quot;0.00&quot;) // Pendiente definir, Formato &quot;0.00&quot;&#xA;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;new XElement(&quot;TotalExecutableAmount&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TotalAmount&quot;, &quot;0.00&quot;) // Pendiente definir, Formato &quot;0.00&quot;&#xA;&#x9;&#x9;&#x9;), */&#xA;&#x9;&#x9;&#x9;new XElement(&quot;InvoiceCurrencyCode&quot;, in_Data[&quot;str_InvoiceCurrencyCode&quot;].ToString())&#xA;&#x9;&#x9;)&#xA;&#x9;),&#xA;&#x9;new XElement(&quot;Parties&quot;,&#xA;&#x9;&#x9;new XElement(&quot;SellerParty&quot;,&#xA;&#x9;&#x9;&#x9;new XElement(&quot;TaxIdentification&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PersonTypeCode&quot;, in_Data[&quot;str_SellerPersonTypeCode&quot;].ToString()),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;ResidenceTypeCode&quot;, in_Data[&quot;str_SellerResidenceTypeCode&quot;].ToString()),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TaxIdentificationNumber&quot;, in_Data[&quot;str_SellerTaxIdentificationNumber&quot;].ToString())&#xA;            )/*  ,&#xA;&#x9;&#x9;&#x9;new XElement(&quot;LegalEntity&quot;,&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CorporateName&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;AddressInSpain&quot;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Address&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PostCode&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Town&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Province&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CountryCode&quot;, &quot;PDT DEFINIR&quot;) // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;OverseasAddress&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Address&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PostCodeAndTown&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Province&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CountryCode&quot;, &quot;PDT DEFINIR&quot;) // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;new XElement(&quot;Individual&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Name&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;FirstSurname&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;AddressInSpain&quot;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Address&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PostCode&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Town&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Province&quot;, &quot;PDT DEFINIR&quot;), ' Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CountryCode&quot;, &quot;PDT DEFINIR&quot;) // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;OverseasAddress&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Address&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PostCodeAndTown&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Province&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CountryCode&quot;, &quot;PDT DEFINIR&quot;) // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;            ) */&#xA;&#x9;&#x9;), &#xA;&#x9;&#x9;new XElement(&quot;BuyerParty&quot;,&#xA;&#x9;&#x9;&#x9;new XElement(&quot;TaxIdentification&quot;,&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PersonTypeCode&quot;, in_Data[&quot;str_BuyerPersonTypeCode&quot;].ToString()),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;ResidenceTypeCode&quot;, in_Data[&quot;str_BuyerResidenceTypeCode&quot;].ToString()),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TaxIdentificationNumber&quot;, in_Data[&quot;str_BuyerTaxIdentificationNumber&quot;].ToString())&#xA;            )/*,&#xA;&#x9;&#x9;&#x9;new XElement(&quot;LegalEntity&quot;,&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CorporateName&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;AddressInSpain&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Address&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PostCode&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Town&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Province&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CountryCode&quot;, &quot;PDT DEFINIR&quot;) // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;OverseasAddress&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Address&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PostCodeAndTown&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Province&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CountryCode&quot;, &quot;PDT DEFINIR&quot;) // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;new XElement(&quot;Individual&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Name&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;FirstSurname&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;AddressInSpain&quot;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Address&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PostCode&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Town&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Province&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CountryCode&quot;, &quot;PDT DEFINIR&quot;) // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;OverseasAddress&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Address&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;PostCodeAndTown&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Province&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;CountryCode&quot;, &quot;PDT DEFINIR&quot;) // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;) */&#xA;&#x9;&#x9;)&#xA;&#x9;),&#xA;&#x9;new XElement(&quot;Invoices&quot;,&#xA;&#x9;&#x9;new XElement(&quot;Invoice&quot;, &#xA;&#x9;&#x9;&#x9;new XElement(&quot;InvoiceHeader&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;InvoiceNumber&quot;, in_Data[&quot;str_InvoiceNumber&quot;].ToString()),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;InvoiceDocumentType&quot;, in_Data[&quot;str_InvoiceDocumentType&quot;].ToString()),&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;InvoiceClass&quot;, in_Data[&quot;str_InvoiceClass&quot;].ToString()),&#xA;&#x9;&#x9;&#x9;&#x9;invoiceClassRectificative.Contains(in_Data[&quot;str_InvoiceClass&quot;].ToString()) ? // Comprobar si es una factura rectificativa&#xA;                    new XElement(&quot;Corrective&quot;,  // Si es factura rectificativa, se incluye el elemento&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;InvoiceNumber&quot;, in_Data[&quot;str_CorrectiveInvoiceNumber&quot;].ToString()) /*,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;ReasonCode&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;ReasonDescription&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TaxPeriod&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;StartDate&quot;, &quot;2000-12-31&quot;), // Pendiente de definir, Formato &quot;aaaa-MM-dd&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;EndDate&quot;, &quot;2000-12-31&quot;) // Pendiente de definir, Formato &quot;aaaa-MM-dd&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    New XElement(&quot;CorrectionMethod&quot;, &quot;PDT DEFINIR&quot;), // Pendiente de definir, Formato &quot;00&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;    New XElement(&quot;CorrectionMethodDescription&quot;, &quot;PDT DEFINIR&quot;) // Pendiente de definir&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;    ) */&#xA;                    )&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;: null, // Sí no es rectificativa, no incluye este elemento.&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;InvoiceIssueData&quot;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;IssueDate&quot;, in_Data[&quot;str_IssueDate&quot;].ToString()), // Formato aaaa-MM-dd&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;InvoiceCurrencyCode&quot;, in_Data[&quot;str_InvoiceCurrencyCode&quot;].ToString()),&#xA;                    new XElement(&quot;TaxCurrencyCode&quot;, in_Data[&quot;str_TaxCurrencyCode&quot;].ToString()),&#xA;                    new XElement(&quot;LanguageName&quot;, in_Data[&quot;str_LanguageName&quot;].ToString())&#xA;                ),&#xA;                in_TaxesOutputs,&#xA;                new XElement(&quot;InvoiceTotals&quot;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TotalGrossAmount&quot;, in_Data[&quot;str_TotalGrossAmount&quot;].ToString())&#xA;&#x9;&#x9;&#x9;&#x9;),&#xA;                new XElement(&quot;TotalGrossAmountBeforeTaxes&quot;, in_Data[&quot;str_TotalGrossAmount&quot;].ToString()),&#xA;&#x9;&#x9;&#x9;&#x9;/*new XElement(&quot;TotalTaxOutputs&quot;, &quot;0.00&quot;), // Pendiente de definir, Formato &quot;0.00&quot; &#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TotalTaxesWithheld&quot;, &quot;0.00&quot;), // Pendiente de definir, Formato &quot;0.00&quot; */&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;InvoiceTotal&quot;, in_Data[&quot;str_InvoiceTotal&quot;].ToString()) /*,&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TotalOutstandingAmount&quot;, &quot;0.00&quot;), 'Pendiente de definir, Formato &quot;0.00&quot;&#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;TotalExecutableAmount&quot;, &quot;0.00&quot;) ' Pendiente de Definir, Formato &quot;0.00&quot; */&#xA;            ),&#xA;            in_Items,&#xA;            new XElement(&quot;AdditionalData&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;Attachment&quot;, &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;AttachmentFormat&quot;, &quot;pdf&quot;),&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;new XElement(&quot;AttachmentData&quot;, in_Data[&quot;str_RutaFichero&quot;].ToString())&#xA;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;)&#xA;&#x9;)&#xA;);" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="547,165" sap2010:WorkflowViewState.IdRef="InvokeCode_3" Language="CSharp">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Data">[Data]</InArgument>
        <InArgument x:TypeArguments="sxl:XElement" x:Key="in_TaxesOutputs">[TaxesOutputs]</InArgument>
        <InArgument x:TypeArguments="sxl:XElement" x:Key="in_Items">[Items]</InArgument>
        <OutArgument x:TypeArguments="sxl:XElement" x:Key="out_Data">[Document]</OutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="547,92" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Info" Message="[Document.ToString(SaveOptions.DisableFormatting)]" />
    <ui:MultipleAssign DisplayName="Build Output File Path" sap:VirtualizedContainerService.HintSize="547,194" sap2010:WorkflowViewState.IdRef="MultipleAssign_3">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_21">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[TempPath]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[in_Config("TempPath").ToString]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_18">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[BaseFilename]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String" xml:space="preserve">[System.Text.RegularExpressions.Regex.Replace(in_Data("BatchIdentifier").ToString, 
	"[^a-zA-Z0-9_]", String.Empty)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_20">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[XmlFile]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[Path.ChangeExtension(BaseFilename, "xml")]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_19">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:String">[OutputFilePath]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:String">[Path.Combine(TempPath, XmlFile)]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
    </ui:MultipleAssign>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="547,92" sap2010:WorkflowViewState.IdRef="LogMessage_5" Level="Info" Message="[BaseFilename]" />
    <ui:WriteTextFile File="{x:Null}" DisplayName="Write Text File" FileName="[OutputFilePath]" sap:VirtualizedContainerService.HintSize="547,133" sap2010:WorkflowViewState.IdRef="WriteTextFile_1" Text="[Document.ToString(SaveOptions.DisableFormatting)]" />
    <Assign DisplayName="Initialize out data" sap:VirtualizedContainerService.HintSize="547,82" sap2010:WorkflowViewState.IdRef="Assign_7">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[out_Data]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[New dictionary(Of String, Object)]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:MultipleAssign DisplayName="Set output data" sap:VirtualizedContainerService.HintSize="547,101" sap2010:WorkflowViewState.IdRef="MultipleAssign_2">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_17">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:Object">[out_Data("Filename")]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:Object">[OutputFilePath]</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
    </ui:MultipleAssign>
  </Sequence>
</Activity>